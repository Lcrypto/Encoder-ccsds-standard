-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    u_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    u_ce0 : OUT STD_LOGIC;
    u_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    cw_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cw_ce0 : OUT STD_LOGIC;
    cw_we0 : OUT STD_LOGIC;
    cw_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of array_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_io,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.244750,HLS_SYN_LAT=728900,HLS_SYN_TPT=none,HLS_SYN_MEM=170,HLS_SYN_DSP=0,HLS_SYN_FF=326,HLS_SYN_LUT=668,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_82BF : STD_LOGIC_VECTOR (15 downto 0) := "1000001010111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_82C0 : STD_LOGIC_VECTOR (15 downto 0) := "1000001011000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal array_io_row_inx_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_io_row_inx_0_ce0 : STD_LOGIC;
    signal array_io_row_inx_0_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal array_io_col_inx_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal array_io_col_inx_0_ce0 : STD_LOGIC;
    signal array_io_col_inx_0_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln33551_fu_327_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln33551_reg_621 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln33551_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln33551_reg_626 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln33551_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33551_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67039_fu_344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67039_reg_640 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln67039_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67039_reg_645 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln67039_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln67039_reg_655 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_367_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_662 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln67052_fu_397_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67052_reg_667 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln67048_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_409_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_435_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_683 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln67056_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln67058_fu_451_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln67058_reg_698 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln67058_1_fu_461_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln67058_1_reg_703 : STD_LOGIC_VECTOR (9 downto 0);
    signal ia_fu_511_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ia_reg_712 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln52_1_fu_522_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln52_1_reg_717 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln49_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_assign_addr_reg_722 : STD_LOGIC_VECTOR (9 downto 0);
    signal ib_fu_532_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ib_reg_730 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln53_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln56_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_4_fu_605_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_4_reg_753 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln67082_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67082_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln67080_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_inx_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_inx_0_ce0 : STD_LOGIC;
    signal row_inx_0_we0 : STD_LOGIC;
    signal row_inx_0_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_inx_0_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal col_inx_0_ce0 : STD_LOGIC;
    signal col_inx_0_we0 : STD_LOGIC;
    signal col_inx_0_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal G_address0 : STD_LOGIC_VECTOR (17 downto 0);
    signal G_ce0 : STD_LOGIC;
    signal G_we0 : STD_LOGIC;
    signal G_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal G_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_assign_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal C_assign_ce0 : STD_LOGIC;
    signal C_assign_we0 : STD_LOGIC;
    signal C_assign_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln33551_reg_226 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal phi_ln67039_reg_237 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_248 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln67050_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_259 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_reg_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ia_0_i_reg_281 : STD_LOGIC_VECTOR (9 downto 0);
    signal C_assign_load_1_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal ib_0_i_reg_305 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_316 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal zext_ln67052_3_fu_424_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67058_fu_441_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln67058_2_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln52_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_4_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_fu_538_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_373_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_fu_385_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67052_1_fu_393_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln67052_fu_381_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln67052_2_fu_415_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67052_1_fu_419_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln67058_1_fu_447_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln67058_2_fu_457_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_477_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_470_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln67058_1_fu_484_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln67058_fu_467_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67058_2_fu_488_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln67058_3_fu_494_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_4_fu_543_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_5_fu_555_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln56_3_fu_563_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln56_2_fu_551_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln56_1_fu_567_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln56_2_fu_573_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal and_ln56_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln56_1_fu_589_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);

    component array_io_array_iobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component array_io_array_iocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component array_io_row_inx_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (8 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component array_io_col_inx_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (9 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component array_io_G IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component array_io_C_assign IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    array_io_row_inx_0_U : component array_io_array_iobkb
    generic map (
        DataWidth => 9,
        AddressRange => 33472,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => array_io_row_inx_0_address0,
        ce0 => array_io_row_inx_0_ce0,
        q0 => array_io_row_inx_0_q0);

    array_io_col_inx_0_U : component array_io_array_iocud
    generic map (
        DataWidth => 10,
        AddressRange => 33472,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => array_io_col_inx_0_address0,
        ce0 => array_io_col_inx_0_ce0,
        q0 => array_io_col_inx_0_q0);

    row_inx_0_U : component array_io_row_inx_0
    generic map (
        DataWidth => 9,
        AddressRange => 33472,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_inx_0_address0,
        ce0 => row_inx_0_ce0,
        we0 => row_inx_0_we0,
        d0 => array_io_row_inx_0_q0,
        q0 => row_inx_0_q0);

    col_inx_0_U : component array_io_col_inx_0
    generic map (
        DataWidth => 10,
        AddressRange => 33472,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => col_inx_0_address0,
        ce0 => col_inx_0_ce0,
        we0 => col_inx_0_we0,
        d0 => array_io_col_inx_0_q0,
        q0 => col_inx_0_q0);

    G_U : component array_io_G
    generic map (
        DataWidth => 1,
        AddressRange => 163840,
        AddressWidth => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => G_address0,
        ce0 => G_ce0,
        we0 => G_we0,
        d0 => G_d0,
        q0 => G_q0);

    C_assign_U : component array_io_C_assign
    generic map (
        DataWidth => 32,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_assign_address0,
        ce0 => C_assign_ce0,
        we0 => C_assign_we0,
        d0 => C_assign_load_1_reg_292,
        q0 => C_assign_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    C_assign_load_1_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                C_assign_load_1_reg_292 <= add_ln56_fu_593_p2;
            elsif (((icmp_ln49_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                C_assign_load_1_reg_292 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67039_reg_655 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_reg_248 <= ap_const_lv9_0;
            elsif (((icmp_ln67050_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_0_reg_248 <= i_3_reg_662;
            end if; 
        end if;
    end process;

    i_1_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67048_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_270 <= ap_const_lv16_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_270 <= i_reg_683;
            end if; 
        end if;
    end process;

    i_2_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln49_fu_505_p2 = ap_const_lv1_1))) then 
                i_2_reg_316 <= ap_const_lv10_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_2_reg_316 <= i_4_reg_753;
            end if; 
        end if;
    end process;

    ia_0_i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln67056_fu_429_p2 = ap_const_lv1_1))) then 
                ia_0_i_reg_281 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln53_fu_526_p2 = ap_const_lv1_1))) then 
                ia_0_i_reg_281 <= ia_reg_712;
            end if; 
        end if;
    end process;

    ib_0_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ib_0_i_reg_305 <= ib_reg_730;
            elsif (((icmp_ln49_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                ib_0_i_reg_305 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67048_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_reg_259 <= ap_const_lv10_0;
            elsif (((icmp_ln67050_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                j_0_reg_259 <= j_fu_409_p2;
            end if; 
        end if;
    end process;

    phi_ln33551_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33551_reg_636 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln33551_reg_226 <= add_ln33551_reg_621;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln33551_reg_226 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_ln67039_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33551_reg_636 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln67039_reg_237 <= ap_const_lv16_0;
            elsif (((icmp_ln67039_reg_655 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln67039_reg_237 <= add_ln67039_reg_640;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_505_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                C_assign_addr_reg_722 <= zext_ln52_fu_517_p1(10 - 1 downto 0);
                    zext_ln52_1_reg_717(9 downto 0) <= zext_ln52_1_fu_522_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln33551_reg_621 <= add_ln33551_fu_327_p2;
                icmp_ln33551_reg_636 <= icmp_ln33551_fu_338_p2;
                    zext_ln33551_reg_626(15 downto 0) <= zext_ln33551_fu_333_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln67039_reg_640 <= add_ln67039_fu_344_p2;
                icmp_ln67039_reg_655 <= icmp_ln67039_fu_355_p2;
                    zext_ln67039_reg_645(15 downto 0) <= zext_ln67039_fu_350_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67048_fu_361_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    add_ln67052_reg_667(18 downto 7) <= add_ln67052_fu_397_p2(18 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln67058_1_reg_703 <= add_ln67058_1_fu_461_p2;
                add_ln67058_reg_698 <= add_ln67058_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                i_3_reg_662 <= i_3_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_4_reg_753 <= i_4_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_reg_683 <= i_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ia_reg_712 <= ia_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                ib_reg_730 <= ib_fu_532_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67080_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    zext_ln67082_reg_758(9 downto 0) <= zext_ln67082_fu_611_p1(9 downto 0);
            end if;
        end if;
    end process;
    zext_ln33551_reg_626(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    zext_ln67039_reg_645(63 downto 16) <= "000000000000000000000000000000000000000000000000";
    add_ln67052_reg_667(6 downto 0) <= "0000000";
    zext_ln52_1_reg_717(18 downto 10) <= "000000000";
    zext_ln67082_reg_758(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln33551_reg_636, icmp_ln67039_reg_655, ap_CS_fsm_state6, icmp_ln67048_fu_361_p2, ap_CS_fsm_state7, ap_CS_fsm_state8, icmp_ln67056_fu_429_p2, ap_CS_fsm_state11, icmp_ln49_fu_505_p2, ap_CS_fsm_state12, icmp_ln53_fu_526_p2, ap_CS_fsm_state14, icmp_ln67080_fu_599_p2, ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln67050_fu_403_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln33551_reg_636 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln67039_reg_655 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln67048_fu_361_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln67050_fu_403_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln67056_fu_429_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln49_fu_505_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln53_fu_526_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln67080_fu_599_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;

    C_assign_address0_assign_proc : process(C_assign_addr_reg_722, ap_CS_fsm_state12, ap_CS_fsm_state14, zext_ln67082_fu_611_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            C_assign_address0 <= zext_ln67082_fu_611_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_assign_address0 <= C_assign_addr_reg_722;
        else 
            C_assign_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    C_assign_ce0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            C_assign_ce0 <= ap_const_logic_1;
        else 
            C_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_assign_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            C_assign_we0 <= ap_const_logic_1;
        else 
            C_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;


    G_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state10, zext_ln67052_3_fu_424_p1, sext_ln67058_2_fu_500_p1, zext_ln56_4_fu_578_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            G_address0 <= zext_ln56_4_fu_578_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            G_address0 <= sext_ln67058_2_fu_500_p1(18 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            G_address0 <= zext_ln67052_3_fu_424_p1(18 - 1 downto 0);
        else 
            G_address0 <= "XXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    G_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state12, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            G_ce0 <= ap_const_logic_1;
        else 
            G_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            G_d0 <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            G_d0 <= ap_const_lv1_0;
        else 
            G_d0 <= "X";
        end if; 
    end process;


    G_we0_assign_proc : process(ap_CS_fsm_state7, icmp_ln67050_fu_403_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln67050_fu_403_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            G_we0 <= ap_const_logic_1;
        else 
            G_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln33551_fu_327_p2 <= std_logic_vector(unsigned(phi_ln33551_reg_226) + unsigned(ap_const_lv16_1));
    add_ln56_1_fu_567_p2 <= std_logic_vector(unsigned(zext_ln56_3_fu_563_p1) + unsigned(zext_ln56_2_fu_551_p1));
    add_ln56_2_fu_573_p2 <= std_logic_vector(unsigned(add_ln56_1_fu_567_p2) + unsigned(zext_ln52_1_reg_717));
    add_ln56_fu_593_p2 <= std_logic_vector(unsigned(zext_ln56_1_fu_589_p1) + unsigned(C_assign_load_1_reg_292));
    add_ln67039_fu_344_p2 <= std_logic_vector(unsigned(phi_ln67039_reg_237) + unsigned(ap_const_lv16_1));
    add_ln67052_1_fu_419_p2 <= std_logic_vector(unsigned(add_ln67052_reg_667) + unsigned(zext_ln67052_2_fu_415_p1));
    add_ln67052_fu_397_p2 <= std_logic_vector(unsigned(zext_ln67052_1_fu_393_p1) + unsigned(zext_ln67052_fu_381_p1));
    add_ln67058_1_fu_461_p2 <= std_logic_vector(unsigned(zext_ln67058_2_fu_457_p1) + unsigned(ap_const_lv10_3FF));
    add_ln67058_2_fu_488_p2 <= std_logic_vector(unsigned(tmp_2_fu_470_p3) + unsigned(sext_ln67058_1_fu_484_p1));
    add_ln67058_3_fu_494_p2 <= std_logic_vector(signed(sext_ln67058_fu_467_p1) + signed(add_ln67058_2_fu_488_p2));
    add_ln67058_fu_451_p2 <= std_logic_vector(unsigned(zext_ln67058_1_fu_447_p1) + unsigned(ap_const_lv11_7FF));
    and_ln56_fu_583_p2 <= (u_q0 and G_q0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state14, icmp_ln67080_fu_599_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln67080_fu_599_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14, icmp_ln67080_fu_599_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln67080_fu_599_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    array_io_col_inx_0_address0 <= zext_ln67039_fu_350_p1(16 - 1 downto 0);

    array_io_col_inx_0_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            array_io_col_inx_0_ce0 <= ap_const_logic_1;
        else 
            array_io_col_inx_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    array_io_row_inx_0_address0 <= zext_ln33551_fu_333_p1(16 - 1 downto 0);

    array_io_row_inx_0_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            array_io_row_inx_0_ce0 <= ap_const_logic_1;
        else 
            array_io_row_inx_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inx_0_address0_assign_proc : process(zext_ln67039_reg_645, ap_CS_fsm_state8, ap_CS_fsm_state5, zext_ln67058_fu_441_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            col_inx_0_address0 <= zext_ln67058_fu_441_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            col_inx_0_address0 <= zext_ln67039_reg_645(16 - 1 downto 0);
        else 
            col_inx_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    col_inx_0_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            col_inx_0_ce0 <= ap_const_logic_1;
        else 
            col_inx_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    col_inx_0_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            col_inx_0_we0 <= ap_const_logic_1;
        else 
            col_inx_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cw_address0 <= zext_ln67082_reg_758(10 - 1 downto 0);

    cw_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            cw_ce0 <= ap_const_logic_1;
        else 
            cw_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    cw_d0 <= C_assign_q0(1 - 1 downto 0);

    cw_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            cw_we0 <= ap_const_logic_1;
        else 
            cw_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_367_p2 <= std_logic_vector(unsigned(i_0_reg_248) + unsigned(ap_const_lv9_1));
    i_4_fu_605_p2 <= std_logic_vector(unsigned(i_2_reg_316) + unsigned(ap_const_lv10_1));
    i_fu_435_p2 <= std_logic_vector(unsigned(i_1_reg_270) + unsigned(ap_const_lv16_1));
    ia_fu_511_p2 <= std_logic_vector(unsigned(ia_0_i_reg_281) + unsigned(ap_const_lv10_1));
    ib_fu_532_p2 <= std_logic_vector(unsigned(ib_0_i_reg_305) + unsigned(ap_const_lv9_1));
    icmp_ln33551_fu_338_p2 <= "1" when (phi_ln33551_reg_226 = ap_const_lv16_82BF) else "0";
    icmp_ln49_fu_505_p2 <= "1" when (ia_0_i_reg_281 = ap_const_lv10_280) else "0";
    icmp_ln53_fu_526_p2 <= "1" when (ib_0_i_reg_305 = ap_const_lv9_100) else "0";
    icmp_ln67039_fu_355_p2 <= "1" when (phi_ln67039_reg_237 = ap_const_lv16_82BF) else "0";
    icmp_ln67048_fu_361_p2 <= "1" when (i_0_reg_248 = ap_const_lv9_100) else "0";
    icmp_ln67050_fu_403_p2 <= "1" when (j_0_reg_259 = ap_const_lv10_280) else "0";
    icmp_ln67056_fu_429_p2 <= "1" when (i_1_reg_270 = ap_const_lv16_82C0) else "0";
    icmp_ln67080_fu_599_p2 <= "1" when (i_2_reg_316 = ap_const_lv10_280) else "0";
    j_fu_409_p2 <= std_logic_vector(unsigned(j_0_reg_259) + unsigned(ap_const_lv10_1));

    row_inx_0_address0_assign_proc : process(zext_ln33551_reg_626, ap_CS_fsm_state8, ap_CS_fsm_state3, zext_ln67058_fu_441_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            row_inx_0_address0 <= zext_ln67058_fu_441_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_inx_0_address0 <= zext_ln33551_reg_626(16 - 1 downto 0);
        else 
            row_inx_0_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    row_inx_0_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            row_inx_0_ce0 <= ap_const_logic_1;
        else 
            row_inx_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_inx_0_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_inx_0_we0 <= ap_const_logic_1;
        else 
            row_inx_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln67058_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_477_p3),19));

        sext_ln67058_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67058_3_fu_494_p2),64));

        sext_ln67058_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67058_reg_698),19));

    tmp_1_fu_385_p3 <= (i_0_reg_248 & ap_const_lv7_0);
    tmp_2_fu_470_p3 <= (add_ln67058_1_reg_703 & ap_const_lv9_0);
    tmp_4_fu_543_p3 <= (ib_0_i_reg_305 & ap_const_lv9_0);
    tmp_5_fu_555_p3 <= (ib_0_i_reg_305 & ap_const_lv7_0);
    tmp_6_fu_477_p3 <= (add_ln67058_1_reg_703 & ap_const_lv7_0);
    tmp_fu_373_p3 <= (i_0_reg_248 & ap_const_lv9_0);
    u_address0 <= zext_ln56_fu_538_p1(8 - 1 downto 0);

    u_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            u_ce0 <= ap_const_logic_1;
        else 
            u_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln33551_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln33551_reg_226),64));
    zext_ln52_1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ia_0_i_reg_281),19));
    zext_ln52_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ia_0_i_reg_281),64));
    zext_ln56_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln56_fu_583_p2),32));
    zext_ln56_2_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_543_p3),19));
    zext_ln56_3_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_555_p3),19));
    zext_ln56_4_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_2_fu_573_p2),64));
    zext_ln56_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ib_0_i_reg_305),64));
    zext_ln67039_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln67039_reg_237),64));
    zext_ln67052_1_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_385_p3),19));
    zext_ln67052_2_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_259),19));
    zext_ln67052_3_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67052_1_fu_419_p2),64));
    zext_ln67052_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_373_p3),19));
    zext_ln67058_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_inx_0_q0),11));
    zext_ln67058_2_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_inx_0_q0),10));
    zext_ln67058_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_270),64));
    zext_ln67082_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_316),64));
end behav;
